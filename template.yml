# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A serverless backend for a financial tracker.

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

Parameters:
  AppId:
    Type: String

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  postCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/category/post-category.postCategory
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A function to create a category for the application and write it into the Category table in DynamoDB.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTable
      Environment:
        Variables:
          CATEGORY_TABLE: !Ref CategoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /category
            Method: POST
            Auth: 
              ApiKeyRequired: true
  putCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/category/put-category.putCategory
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A function to update a category and save it to the Category table in DynamoDB.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTable
      Environment: 
        Variables:
          CATEGORY_TABLE: !Ref CategoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /category/{id}
            Method: PUT
            Auth: 
              ApiKeyRequired: true
  deleteCategoryFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/category/delete-category.deleteCategory
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A function to delete a category from the Category table in DynamoDB.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTable
      Environment:
        Variables:
          CATEGORY_TABLE: !Ref CategoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /category/{id}
            Method: DELETE
            Auth: 
              ApiKeyRequired: true
            RestApiId:
              Ref: ServerlessRestApi
  getCategoryFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/category/get-category.getCategory
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A function to retrieve a specific category from the Category table in DynamoDB.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTable
      Environment:
        Variables:
          CATEGORY_TABLE: !Ref CategoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /category/{id}
            Method: GET
            Auth: 
              ApiKeyRequired: true
            RestApiId:
              Ref: ServerlessRestApi
  getCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/category/get-all-categories.getAllCategories
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: List all categories from the Category table in DynamoDB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoryTable
      Environment:
        Variables:
          CATEGORY_TABLE: !Ref CategoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /category
            Method: GET
            Auth: 
              ApiKeyRequired: true
            RestApiId:
              Ref: ServerlessRestApi
  getExpenseEntriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/expense-entry/get-all-expense-entries.getAllExpenseEntries
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: List all expense entries from the ExpenseEntry table in DynamoDB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExpenseEntryTable
      Environment:
        Variables:
          EXPENSE_ENTRY_TABLE: !Ref ExpenseEntryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /expense-entry
            Method: GET
            Auth: 
              ApiKeyRequired: true
            RestApiId:
              Ref: ServerlessRestApi
  getExpenseEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/expense-entry/get-expense-entry.getExpenseEntry
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: Get an expense entry from the ExpenseEntry table in DynamoDB by id.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExpenseEntryTable
      Environment:
        Variables:
          EXPENSE_ENTRY_TABLE: !Ref ExpenseEntryTable
      Events: 
        Api:
          Type: Api
          Properties:
            Path: /expense-entry/{id}
            Method: GET
            Auth: 
              ApiKeyRequired: true
            RestApiId:
              Ref: ServerlessRestApi
  postExpenseEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/expense-entry/post-expense-entry.postExpenseEntry
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: Create an expense entry and save it to the ExpenseEntry table in DynamoDB.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExpenseEntryTable
      Environment: 
        Variables:
          EXPENSE_ENTRY_TABLE: !Ref ExpenseEntryTable
      Events: 
        Api:
          Type: Api
          Properties:
            Path: /expense-entry
            Method: POST
            Auth: 
              ApiKeyRequired: true
            RestApiId:
              Ref: ServerlessRestApi
  putExpenseEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/expense-entry/put-expense-entry.putExpenseEntry
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: Update an expense entry and save it in the ExpenseEntry table in DynamoDB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExpenseEntryTable
      Environment:
        Variables:
          EXPENSE_ENTRY_TABLE: !Ref ExpenseEntryTable
      Events: 
        Api:
          Type: Api
          Properties:
            Path: /expense-entry/{id}
            Method: PUT
            Auth: 
              ApiKeyRequired: true
            RestApiId:
              Ref: ServerlessRestApi
  deleteExpenseEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/expense-entry/delete-expense-entry.deleteExpenseEntry
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: Delete an expense entry from the ExpenseEntry table in DynamoDB
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref ExpenseEntryTable
      Environment:
        Variables:
          EXPENSE_ENTRY_TABLE: !Ref ExpenseEntryTable
      Events: 
        Api:
          Type: Api
          Properties:
            Path: /expense-entry/{id}
            Method: DELETE
            Auth:
              ApiKeyRequired: true
            RestApiId:
              Ref: ServerlessRestApi
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  CategoryTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  ExpenseEntryTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput: 
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
